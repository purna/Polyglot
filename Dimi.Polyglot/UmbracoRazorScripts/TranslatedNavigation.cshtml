@inherits umbraco.MacroEngines.DynamicNodeContext
@using umbraco.MacroEngines
@{
    var level = String.IsNullOrEmpty(Parameter.Level) ? 1 : int.Parse(Parameter.Level);
    var ulId = String.IsNullOrEmpty(Parameter.UlCssId) ? "" : String.Format(" id={0}", Parameter.UlCssId);
    var parent = @Model.AncestorOrSelf(level);
    if (parent != null)
    {
        string visibleCondition = string.IsNullOrEmpty(Parameter.NaviHideProperty) ? "Visible" : string.Format("{0} == false", Parameter.NaviHideProperty);

    <ul@ulId>
        @foreach (var item in parent.Children.Where(visibleCondition))
        {
            var selected = Array.IndexOf(Model.Path.Split(','), item.Id.ToString()) >= 0 ? string.Format(" class=\"{0}\"", Parameter.CurrentItemCssClass) : "";

            string selectedLanguage = RenderPage("SelectedLanguage.cshtml").ToString().Trim();

            DynamicNode page = item;

            string translatedTitle = string.Empty;

            var prop = page.GetProperty(Parameter.TitlePropertyAlias + "_" + selectedLanguage);
            if (prop != null) { translatedTitle = prop.ToString(); }

            if (string.IsNullOrEmpty(translatedTitle))
            {

                foreach (DynamicNode child in page.GetChildrenAsList)
                {

                    if (child.NodeTypeAlias == page.NodeTypeAlias + "_TranslationFolder")
                    {

                        foreach (DynamicNode translation in child.GetChildrenAsList)
                        {
                            prop = translation.GetProperty("language");

                            if (prop != null && prop.ToString().ToLower() == selectedLanguage)
                            {
                                prop = translation.GetProperty(Parameter.TitlePropertyAlias);
                            }
                            else
                            {
                                prop = null;
                            }

                            if (prop != null)
                            {
                                translatedTitle = prop.ToString();
                            }
                        }
                    }
                }
            }

            if (string.IsNullOrEmpty(translatedTitle))
            {
                prop = page.GetProperty(Parameter.TitlePropertyAlias);
                if (prop != null) { translatedTitle = prop.ToString(); }
            }

            string link = item.Url;
            if (!string.IsNullOrEmpty(selectedLanguage))
            {
                link += "?lang=" + selectedLanguage;
            }

            <li@Html.Raw(selected)><a href='@link' title='@Html.Raw(@translatedTitle)'>@Html.Raw(translatedTitle)</a>
            </li>
            
        }
    </ul>
    }
 }
