@*
    PropertyTranslation.cshtml
    Part of the Polyglot package.
*@
@inherits umbraco.MacroEngines.DynamicNodeContext
@using umbraco.MacroEngines;
@{

    string selectedLanguage = RenderPage("SelectedLanguage.cshtml").ToString().Trim();
    string selectedLanguageNoDash = selectedLanguage.Replace("-", string.Empty);

    DynamicNode page = Model;

    var contentFound = false;

    if (page.HasProperty(Parameter.Property + selectedLanguageNoDash) && !string.IsNullOrEmpty(page.GetPropertyValue(Parameter.Property + selectedLanguageNoDash)))
    {
        contentFound = true;
        @Html.Raw(Umbraco.Web.Templates.TemplateUtilities.ParseInternalLinks(page.GetPropertyValue(Parameter.Property + selectedLanguageNoDash).ToString()))
    }

    if (!contentFound)
    {
        foreach (DynamicNode child in page.GetChildrenAsList)
        {
            if (child.NodeTypeAlias == page.NodeTypeAlias + "TranslationFolder")
            {
                foreach (DynamicNode translation in child.GetChildrenAsList)
                {
                    var language = translation.GetPropertyValue("language");

                    if (language != null && language.ToString().ToLower() == selectedLanguage.ToLower())
                    {
                        if (translation.HasProperty(Parameter.Property) && !string.IsNullOrEmpty(translation.GetPropertyValue(Parameter.Property)))
                        {
                            contentFound = true;
                            @Html.Raw(Umbraco.Web.Templates.TemplateUtilities.ParseInternalLinks(translation.GetPropertyValue(Parameter.Property)))
                        }
                    }
                }
            }
        }
    }

    if (!contentFound)
    {

        if (page.HasProperty(Parameter.Property) && !string.IsNullOrEmpty((page.GetPropertyValue(Parameter.Property).ToString())))
        {
            @Html.Raw(Umbraco.Web.Templates.TemplateUtilities.ParseInternalLinks(page.GetPropertyValue(Parameter.Property).ToString()))
        }
    }
}