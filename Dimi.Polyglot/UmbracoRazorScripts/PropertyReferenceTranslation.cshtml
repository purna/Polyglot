@*
    PropertyTranslation.cshtml
    Part of the Polyglot package.
*@
@inherits umbraco.MacroEngines.DynamicNodeContext
@using umbraco.MacroEngines;
@{
    int nodeID = PageData[0];
    string property = PageData[1];
    string selectedLanguage = PageData[2];
    string selectedLanguageNoDash = selectedLanguage.Replace("-", string.Empty);

    DynamicNode page = new DynamicNode(nodeID);

    var value = string.Empty;

    if (page.HasProperty(property + selectedLanguageNoDash) && !string.IsNullOrEmpty(page.GetPropertyValue(property + selectedLanguageNoDash)))
    {
        value = Umbraco.Web.Templates.TemplateUtilities.ParseInternalLinks(page.GetPropertyValue(property + selectedLanguageNoDash).ToString());
    }

    if (string.IsNullOrEmpty(value))
    {
        foreach (DynamicNode child in page.GetChildrenAsList)
        {
            if (child.NodeTypeAlias == page.NodeTypeAlias + "TranslationFolder")
            {
                foreach (DynamicNode translation in child.GetChildrenAsList)
                {
                    var prop = translation.GetPropertyValue("language");

                    if (prop != null && prop.ToString().ToLower() == selectedLanguage.ToLower())
                    {
                        prop = translation.GetPropertyValue(property);
                    }
                    else
                    {
                        prop = null;
                    }

                    if (prop != null)
                    {
                        value = prop;
                    }
                }
            }
        }
    }

    if (string.IsNullOrEmpty(value))
    {
        var prop = page.GetPropertyValue(property);
        if (prop != null)
        {
            value = prop;
        }
    }

    @Html.Raw(Umbraco.Web.Templates.TemplateUtilities.ParseInternalLinks(value))
}